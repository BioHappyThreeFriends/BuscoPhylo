from pathlib import Path
import glob
import os

#---- setup config ----
configfile: "config/default.yaml"

#---- setup paths ----
cluster_log_dir_path = Path(config["cluster_log_dir"])
genome_dir_path = Path(config["genome_dir"])
log_dir_path = Path(config["log_dir"])
benchmark_dir_path = Path(config["benchmark_dir"])
output_dir_path = Path(config["output_dir"])

busco_dir_path = output_dir_path / config["busco_dir"]
common_ids_dir_path = output_dir_path / config["common_ids_dir"]
single_copy_busco_sequences_dir_path = common_ids_dir_path / config["single_copy_busco_sequences_dir"]
merged_sequences_dir_path = common_ids_dir_path / config["merged_sequences_dir"]
mafft_dir_path = output_dir_path / config["mafft_dir"]
trimal_dir_path = output_dir_path / config["trimal_dir"]
concat_aligments_dir_path = output_dir_path / config["concat_aligments_dir"]
iqtree_dir_path = output_dir_path / config["iqtree_dir"]


if "species_list" not in config:
    config["species_list"] = [d.name[:-6] for d in genome_dir_path.iterdir() if d.is_file()]

#---- necessary functions ----
def expand_template_from_common_ids(wildcards, template):
    checkpoint_output = checkpoints.common_ids.get(**wildcards).output[0]
    N = glob_wildcards(os.path.join(checkpoint_output, "common.ids{N}")).N
    return expand(str(template), N=N)


localrules: all, files_transfer

rule all:
    input:
        # busco:
        expand(busco_dir_path / "{species}/short_summary_{species}.txt", species=config["species_list"]),
        directory(single_copy_busco_sequences_dir_path),
        lambda w: expand_template_from_common_ids(w, merged_sequences_dir_path / "{N}"),

        # mafft:
        directory(mafft_dir_path / "fna"),
        directory(mafft_dir_path / "faa"),

        # trimal:
        directory(trimal_dir_path / "fna"),
        directory(trimal_dir_path / "faa"),

        # concat fasta:
        concat_aligments_dir_path / config["concat_fna_filename"],
        concat_aligments_dir_path / config["concat_faa_filename"],

        # iqtree:
        directory(iqtree_dir_path / "fna"),
        directory(iqtree_dir_path / "faa"),


rule files_transfer:
    input:
        mafft_fna_dirs=lambda w: expand_template_from_common_ids(w, mafft_dir_path / "fna_tmp" / "{N}"),
        mafft_faa_dirs=lambda w: expand_template_from_common_ids(w, mafft_dir_path / "faa_tmp" / "{N}"),
        trimal_fna_dirs=lambda w: expand_template_from_common_ids(w, trimal_dir_path / "fna_tmp" / "{N}"),
        trimal_faa_dirs=lambda w: expand_template_from_common_ids(w, trimal_dir_path / "faa_tmp" / "{N}"),
    output:
        mafft_fna_dir=directory(mafft_dir_path / "fna"),
        mafft_faa_dir=directory(mafft_dir_path / "faa"),
        trimal_fna_dir=directory(trimal_dir_path / "fna"),
        trimal_faa_dir=directory(trimal_dir_path / "faa"),
    shell:
        "mkdir -p {output.mafft_fna_dir}; for i in {input.mafft_fna_dirs}; do mv $i/*.fna {output.mafft_fna_dir}/; done; "
        "mkdir -p {output.mafft_faa_dir}; for i in {input.mafft_faa_dirs}; do mv $i/*.faa {output.mafft_faa_dir}/; done; "
        "mkdir -p {output.trimal_fna_dir}; for i in {input.trimal_fna_dirs}; do mv $i/*.fna {output.trimal_fna_dir}/; done; "
        "mkdir -p {output.trimal_faa_dir}; for i in {input.trimal_faa_dirs}; do mv $i/*.faa {output.trimal_faa_dir}/; done; "


#---- load rules ----
include: "rules/busco.smk"
include: "rules/common_ids.smk"
include: "rules/mafft.smk"
include: "rules/trimal.smk"
include: "rules/concat_fasta.smk"
include: "rules/iqtree.smk"